import sys
from collections.abc import Callable
from configparser import RawConfigParser
from logging import Filter, Filterer, Formatter, Handler, Logger
from socketserver import StreamRequestHandler, ThreadingTCPServer
from threading import Thread
from typing import (
    IO,
    Any,
    ClassVar,
    Dict,
    Generic,
    Hashable,
    Iterable,
    List,
    Optional,
    Pattern,
    Sequence,
    Tuple,
    TypeVar,
    Union,
    overload,
)

from Typeshed import AnyPath, StrPath

if sys.version_info >= (3, 7):
    _Path = AnyPath
else:
    _Path = StrPath

_Tkey = TypeVar("_Tkey", bound=Hashable)
_TValue = TypeVar("_TValue")
_T = TypeVar("_T")

DEFAULT_LOGGING_CONFIG_PORT: int
RESET_ERROR: int
_listener: Optional[Any]
IDENTIFIER: Pattern[str]
dictConfigClass = DictConfigurator

def fileConfig(
    fname: Union[_Path, IO[str], RawConfigParser],
    defaults: Optional[Dict[str, str]] = ...,
    disable_existing_loggers: bool = ...,
    encoding: Optional[str] = ...,
) -> None: ...
def _resolve(name: str) -> _T: ...
def _strip_spaces(alist: List[str]) -> Iterable[_Tkey]: ...
def _create_formatters(cp: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> Dict[_Tkey, _TValue]: ...
def _install_handlers(
    cp: Dict[_Tkey, Dict[_Tkey, _TValue]], formatters: Dict[_Tkey, Dict[_Tkey, _TValue]]
) -> Dict[_Tkey, _TValue]: ...
def _handle_existing_loggers(
    existing: List[Union[str, Logger]], child_loggers: List[Union[str, Logger]], disable_existing: bool
) -> None: ...
def _install_loggers(cp: Dict[_Tkey, Dict[_Tkey, _TValue]], handlers: Dict[_Tkey, _TValue], disable_existing: bool) -> None: ...
def _clearExistingHandlers() -> None: ...
def valid_ident(s: str) -> bool: ...

class ConvertingMixin(object):
    def convert_with_key(self, key: _Tkey, value: _TValue, replace: bool) -> Dict[_Tkey, _TValue]: ...
    def convert(self, value: _TValue) -> Dict[_Tkey, _TValue]: ...

class ConvertingDict(Generic[_Tkey, _TValue], ConvertingMixin):
    def __getitem__(self, key: _Tkey) -> _TValue: ...
    def get(self, key: _Tkey, default: Optional[_Tkey] = ...) -> _TValue: ...
    def pop(self, key: _Tkey, default: Optional[_Tkey] = ...) -> _TValue: ...

class ConvertingList(Generic[_T], ConvertingMixin):
    @overload
    def __getitem__(self, key: int) -> _T: ...
    @overload
    def __getitem__(self, key: slice) -> List[_T]: ...
    def pop(self, idx: int) -> _TValue: ...

class ConvertingTuple(Generic[_T], ConvertingMixin):
    @overload
    def __getitem__(self, key: int) -> _T: ...
    @overload
    def __getitem__(self, key: slice) -> Tuple[_T]: ...

class DictConfigurator(BaseConfigurator):
    def configure(self) -> None: ...
    def configure_formatter(self, config: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> Union[_T, Formatter]: ...
    def configure_filter(self, config: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> Union[_T, Filter]: ...
    def add_filters(self, filterer: Filterer, filters: Iterable[Filter]) -> None: ...
    def configure_handler(self, config: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> Union[_T, Filter]: ...
    def add_handlers(self, logger: Logger, handlers: Iterable[Handler]) -> None: ...
    def common_logger_config(
        self, logger: Logger, config: Dict[_Tkey, Dict[_Tkey, _TValue]], incremental: Optional[bool] = ...
    ) -> None: ...
    def configure_logger(
        self, name: str, config: Dict[_Tkey, Dict[_Tkey, _TValue]], incremental: Optional[bool] = ...
    ) -> None: ...
    def configure_root(self, config: Dict[_Tkey, Dict[_Tkey, _TValue]], incremental: Optional[bool] = ...) -> None: ...

def dictConfig(config: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> None: ...
def listen(port: int = ..., verify: Optional[Callable[[bytes], Optional[bytes]]] = ...) -> Thread: ...
def stopListening() -> None: ...

class BaseConfigurator(object):
    CONVERT_PATTERN: ClassVar[Pattern[str]]
    WORD_PATTERN: ClassVar[Pattern[str]]
    DOT_PATTERN: ClassVar[Pattern[str]]
    INDEX_PATTERN: ClassVar[Pattern[str]]
    DIGIT_PATTERN: ClassVar[Pattern[str]]
    value_converters: ClassVar[Dict[str, str]]
    importer: ClassVar[staticmethod]
    config: ClassVar[ConvertingDict]
    def __init__(self, config: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> None: ...
    def resolve(self, s: str) -> _T: ...
    def ext_convert(self, value: str) -> _T: ...
    def cfg_convert(self, value: str) -> _T: ...
    def convert(self, value: Union[str, Dict[_Tkey, _TValue], List[str]]) -> _T: ...
    def configure_custom(self, config: Dict[_Tkey, Dict[_Tkey, _TValue]]) -> _T: ...
    def asTuple(self, value: List[_T]) -> Tuple[_T]: ...
